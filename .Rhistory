object <- path.expand(object)
if (!file.exists(object)) {
return(.errorhandler("The file does not exist: ",
object, mode = errormode))
}
if (!isTRUE(!file.info(object)$isdir)) {
return(.errorhandler("The specified pathname is not a file: ",
object, mode = errormode))
}
if (file.access(object, 4)) {
return(.errorhandler("The specified file is not readable: ",
object, mode = errormode))
}
}
if (is.character(skip))
skip <- 0
val <- .Call(digest_impl, object, as.integer(algoint), as.integer(length),
as.integer(skip), as.integer(raw), as.integer(seed))
return(val)
}
library(digest)
R.utils::reassignInPackage("digest", "digest", mydigest)
roxygen2::roxygenise()
library(hierclass)
?hloss
getwd()
ls()
rm(list=ls());gc()
setwd("Z:/Projects/DESTATIS/PredErrorComplex/HierClassImpl/Package")
library("mlr3")
library("mlr3learners")
library("mlr3extralearners")
?create_learner
create_learner(
path = "./RFiles",
classname = "topdown",
type = "classif",
key = "topdown",
algorithm = "Hierarchical top-down classification",
package = "hierclass",
caller = "topdown",
feature_types = c("logical", "integer", "numeric", "factor", "ordered"),
predict_types = c("response"),
properties = c("multiclass"),
gh_name = "RomanHornung",
data_formats = "data.table"
)
?p_int
data(datasim)
# package = "rpart",
# caller = "rpart",
library("R6")
library("paradox")
library("mlr3")
library("mlr3learners")
library("mlr3extralearners")
library("mlr3misc")
source("./RFiles/learner_TestPack_classif_testcl.R")
# source("./RFiles/test_paramtest_TestPack_classif_testcl.R")
# source("./RFiles/test_TestPack_classif_testcl.R")
source("trainfun.R")
source("predictfun.R")
ordered_features = function(task, learner) {
task$data(cols = intersect(names(learner$state$task_prototype), task$feature_names))
}
load("datasim.Rda")
source("./RFiles/learner_hierclass_classif_topdown.R")
ordered_features = function(task, learner) {
task$data(cols = intersect(names(learner$state$task_prototype), task$feature_names))
}
load("datasim.Rda")
task = tsk("datasim")
head(datasim)
task = as_task_classif(ydepvar ~ ., data = datasim)
learner = lrn("classif.topdown")
source("./RFiles/learner_hierclass_classif_topdown.R")
learner = lrn("classif.topdown")
dim(datasim)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:400)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 401:50)
source("./RFiles/learner_hierclass_classif_topdown.R")
predictions = learner$predict(task, row_ids = 401:50)
ordered_features = function(task, learner) {
task$data(cols = intersect(names(learner$state$task_prototype), task$feature_names))
}
load("datasim.Rda")
task = as_task_classif(ydepvar ~ ., data = datasim)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:400)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 401:50)
predictions
rm(list=ls());gc()
setwd("Z:/Projects/DESTATIS/PredErrorComplex/HierClassImpl/Package")
library("R6")
library("paradox")
library("mlr3")
library("mlr3learners")
library("mlr3extralearners")
library("mlr3misc")
mlr3learners
mlr_learners
library("R6")
library("paradox")
library("mlr3")
library("mlr3learners")
library("mlr3extralearners")
library("mlr3misc")
source("./RFiles/learner_hierclass_classif_topdown.R")
ordered_features = function(task, learner) {
task$data(cols = intersect(names(learner$state$task_prototype), task$feature_names))
}
load("datasim.Rda")
task = as_task_classif(ydepvar ~ ., data = datasim)
learner = lrn("classif.topdown")
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:400)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 401:50)
traceback()
rm(list=ls());gc()
# package = "rpart",
# caller = "rpart",
library("R6")
library("paradox")
library("mlr3")
library("mlr3learners")
library("mlr3extralearners")
library("mlr3misc")
source("./RFiles/learner_hierclass_classif_topdown.R")
# source("./RFiles/test_paramtest_TestPack_classif_testcl.R")
# source("./RFiles/test_TestPack_classif_testcl.R")
ordered_features = function(task, learner) {
task$data(cols = intersect(names(learner$state$task_prototype), task$feature_names))
}
load("datasim.Rda")
task = as_task_classif(ydepvar ~ ., data = datasim)
learner = lrn("classif.topdown")
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:400)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 401:50)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
names(predictions)
predictions$response
predictions$truth
predictions$response
predictions$truth
# this is what the decision tree looks like
learner$model
predictions$response
predictions$truth
dim(datasim)
predictions = learner$predict(task, row_ids = 401:560)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
predictions$response
predictions$truth
mean(predictions$response==predictions$truth)
learner$model$allclasses
task = as_task_classif(ydepvar ~ ., data = datasim)
learner = lrn("classif.topdown", confid=0.5)
dim(datasim)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:400)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 401:560)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
predictions$response
predictions$truth
mean(predictions$response==predictions$truth)
learner$model$allclasses
task = as_task_classif(ydepvar ~ ., data = datasim)
learner = lrn("classif.topdown", confid=0.1)
dim(datasim)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:400)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 401:560)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
predictions$response
predictions$truth
learner = lrn("classif.topdown", confid=0)
learner = lrn("classif.topdown", confid=0.01)
dim(datasim)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:400)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 401:560)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
predictions$response
predictions$truth
task = as_task_classif(ydepvar ~ ., data = datasim)
learner = lrn("classif.topdown")
dim(datasim)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:400)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 401:560, confid=0.1)
predictions
class(predictions)
# this is what the decision tree looks like
learner$model
# https://github.com/jona2510/ADforHC
datahier <- processdata("Z:/Projects/DESTATIS/PredErrorComplex/Code/Data/HA_10_FD_b_train.arff")
source("Z:/Projects/DESTATIS/PredErrorComplex/HierClassImpl/utility.R")
# https://github.com/jona2510/ADforHC
datahier <- processdata("Z:/Projects/DESTATIS/PredErrorComplex/Code/Data/HA_10_FD_b_train.arff")
dim(datahier)
task = as_task_classif(ydepvar ~ ., data = datahier)
learner = lrn("classif.topdown")
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280, confid=0.1)
learner = lrn("classif.topdown", confid=0.1)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
predictions$response
predictions$truth
predictions$response
predictions$truth
# this is what the decision tree looks like
learner$model
ui <- data.frame(pred=predictions$response, truth=predictions$truth)
fix(ui)
set.seed(1234)
task = as_task_classif(ydepvar ~ ., data = datahier)
learner = lrn("classif.topdown", confid=1)
dim(datasim)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
ui1 <- predictions$response
predictions$truth
ui <- data.frame(pred=predictions$response, truth=predictions$truth)
fix(ui)
set.seed(1234)
task = as_task_classif(ydepvar ~ ., data = datahier)
learner = lrn("classif.topdown", confid=0.001)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
ui2 <- predictions$response
aha <- data.frame(ui1=ui1, ui2=ui2)
fix(aha)
head(datahier)
trmod <- topdown(ydepvar ~ . , data=datahier[1:3000,])
library("hierclass")
trmod <- topdown(ydepvar ~ . , data=datahier[1:3000,])
ui3 <- predict(trmod, data=datahier[3001:3280,])
ui4 <- predict(trmod, data=datahier[3001:3280,], confid=0.1)
aha <- data.frame(ui3=ui3, ui4=ui4)
fix(ah)
fix(aha)
set.seed(1234)
task = as_task_classif(ydepvar ~ ., data = datahier)
learner = lrn("classif.topdown")
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
predictions
class(predictions)
ui1 <- predictions$response
set.seed(1234)
library("hierclass")
trmod <- topdown(ydepvar ~ . , data=datahier[1:3000,])
ui2 <- predict(trmod, data=datahier[3001:3280,])
ui3 <- predict(trmod, data=datahier[3001:3280,], confid=0.1)
aha <- data.frame(ui1=ui1, ui2=ui2, ui3=ui3)
fix(aha)
any(is.na(ah$ui1))
any(is.na(ahq$ui1))
any(is.na(aha$ui1))
any(is.na(aha$ui2))
mean(aha$ui1==aha$ui2)
ui1
ui2
remclasses <- setdiff(learner$model$allclasses, unique(as.character(ui1)))
remclasses
as.character(ui2[is.na(ui1)])
as.character(ui2[is.na(ui1)]) %in% remclasses
all(as.character(ui2[is.na(ui1)]) %in% remclasses)
unique(as.character(ui1))
unique(as.character(ui1))
aha <- unique(as.character(ui1))
aha[!is.na(aha)]
all(as.character(ui2[is.na(ui1)]) %in% aha[!is.na(aha)])
any(as.character(ui2[is.na(ui1)]) %in% aha[!is.na(aha)])
names(learner)
set.seed(1234)
task = as_task_classif(ydepvar ~ ., data = datahier)
names(task)
task$labels
task$class_names
task$target_names
datahier[,task$target_names]
learner = lrn("classif.topdown")
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
names(task)
sapply(task, class)
task$negative
task$positive
task$class_names
names(task)
rm(list=ls());gc()
# package = "rpart",
# caller = "rpart",
library("R6")
library("paradox")
library("mlr3")
library("mlr3learners")
library("mlr3extralearners")
library("mlr3misc")
source("./RFiles/learner_hierclass_classif_topdown.R")
# source("./RFiles/test_paramtest_TestPack_classif_testcl.R")
# source("./RFiles/test_TestPack_classif_testcl.R")
ordered_features = function(task, learner) {
task$data(cols = intersect(names(learner$state$task_prototype), task$feature_names))
}
source("Z:/Projects/DESTATIS/PredErrorComplex/HierClassImpl/utility.R")
# https://github.com/jona2510/ADforHC
datahier <- processdata("Z:/Projects/DESTATIS/PredErrorComplex/Code/Data/HA_10_FD_b_train.arff")
# datahier <- processdata("Z:/Projects/DESTATIS/PredErrorComplex/Code/Data/HA_01_FD_b_train.arff")
set.seed(1234)
task = as_task_classif(ydepvar ~ ., data = datahier)
learner = lrn("classif.topdown")
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
task$class_names
learner$model
task$class_names <- c(task$class_names, "(hu")
rm(list=ls());gc()
rm(list=ls());gc()
# package = "rpart",
# caller = "rpart",
library("R6")
library("paradox")
library("mlr3")
library("mlr3learners")
library("mlr3extralearners")
library("mlr3misc")
source("./RFiles/learner_hierclass_classif_topdown.R")
# source("./RFiles/test_paramtest_TestPack_classif_testcl.R")
# source("./RFiles/test_TestPack_classif_testcl.R")
ordered_features = function(task, learner) {
task$data(cols = intersect(names(learner$state$task_prototype), task$feature_names))
}
source("Z:/Projects/DESTATIS/PredErrorComplex/HierClassImpl/utility.R")
# https://github.com/jona2510/ADforHC
datahier <- processdata("Z:/Projects/DESTATIS/PredErrorComplex/Code/Data/HA_10_FD_b_train.arff")
# datahier <- processdata("Z:/Projects/DESTATIS/PredErrorComplex/Code/Data/HA_01_FD_b_train.arff")
set.seed(1234)
task = as_task_classif(ydepvar ~ ., data = datahier)
learner = lrn("classif.topdown")
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
predictions
class(predictions)
predictions = learner$predict(task, row_ids = 3001:3280, confid=0.5)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000, confid=0.5)
learner$param_set$get_values
learner$param_set$get_values(tags="predict")
learner = lrn("classif.topdown", confid=0.5)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
learner$param_set$get_values(tags="predict")
learner$param_set
?p_dbl
rm(list=ls());gc()
# package = "rpart",
# caller = "rpart",
library("R6")
library("paradox")
library("mlr3")
library("mlr3learners")
library("mlr3extralearners")
library("mlr3misc")
source("./RFiles/learner_hierclass_classif_topdown.R")
# source("./RFiles/test_paramtest_TestPack_classif_testcl.R")
# source("./RFiles/test_Tes
ordered_features = function(task, learner) {
task$data(cols = intersect(names(learner$state$task_prototype), task$feature_names))
}
source("Z:/Projects/DESTATIS/PredErrorComplex/HierClassImpl/utility.R")
# https://github.com/jona2510/ADforHC
datahier <- processdata("Z:/Projects/DESTATIS/PredErrorComplex/Code/Data/HA_10_FD_b_train.arff")
# datahier <- processdata("Z:/Projects/DESTATIS/PredErrorComplex/Code/Data/HA_01_FD_b_train.arff")
set.seed(1234)
task = as_task_classif(ydepvar ~ ., data = datahier)
learner = lrn("classif.topdown", confid=0.5)
learner = lrn("classif.topdown", confid=0.1)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
predictions
class(predictions)
fix(predictions)
ui <- data.frame(pred=predictions$response, truth=predictions$truth)
fix(ui)
learner = lrn("classif.topdown", confid=0.8)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
predictions
class(predictions)
ui <- data.frame(pred=predictions$response, truth=predictions$truth)
fix(ui)
predictions$score(msr("classif.acc"))
yun <- as.character(unique(datahier$ydepvar))
yun <- yun[order(sapply(yun, function(x) length(strsplit(x, split="\\.")[[1]])))]
ylist <- sapply(yun, function(x) strsplit(x, split="\\.")[[1]])
allclasses <- unique(unlist(sapply(ylist, function(x) sapply(1:length(x), function(y) paste(x[1:y], collapse=".")))))
datahier$ydepvar <- factor(datahier$ydepvar, levels=allclasses)
task = as_task_classif(ydepvar ~ ., data = datahier)
learner = lrn("classif.topdown", confid=1)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
learner = lrn("classif.topdown", confid=0.7)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
source("Z:/Projects/DESTATIS/PredErrorComplex/HierClassImpl/utility.R")
# https://github.com/jona2510/ADforHC
datahier <- processdata("Z:/Projects/DESTATIS/PredErrorComplex/Code/Data/HA_10_FD_b_train.arff")
# datahier <- processdata("Z:/Projects/DESTATIS/PredErrorComplex/Code/Data/HA_01_FD_b_train.arff")
yun <- as.character(unique(datahier$ydepvar))
yun <- yun[order(sapply(yun, function(x) length(strsplit(x, split="\\.")[[1]])))]
ylist <- sapply(yun, function(x) strsplit(x, split="\\.")[[1]])
allclasses <- unique(unlist(sapply(ylist, function(x) sapply(1:length(x), function(y) paste(x[1:y], collapse=".")))))
datahier$ydepvar <- factor(datahier$ydepvar, levels=allclasses)
set.seed(1234)
task = as_task_classif(ydepvar ~ ., data = datahier)
learner = lrn("classif.topdown", confid=0.1)
# train a model of this learner for a subset of the task
learner$train(task, row_ids = 1:3000)
# this is what the decision tree looks like
learner$model
predictions = learner$predict(task, row_ids = 3001:3280)
predictions
class(predictions)
predictions$score(msr("classif.acc"))
library(hierclass)
trmod <- topdown(ydepvar ~ . , data=datahier[1:3000,])
?predict.topdown
ui3 <- predict(trmod, data=datahier[3001:3280,], confid=0.01)
aha <- data.frame(truth=datahier[3001:3280,]$ydepvar, preds=aui3)
aha <- data.frame(truth=datahier[3001:3280,]$ydepvar, preds=ui3)
fix(aha)
